"use strict";(self.webpackChunkdesarrollo_web=self.webpackChunkdesarrollo_web||[]).push([[1334],{3905:(e,a,n)=>{n.d(a,{Zo:()=>u,kt:()=>y});var r=n(7294);function o(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function s(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);a&&(r=r.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,r)}return n}function t(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?s(Object(n),!0).forEach((function(a){o(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function c(e,a){if(null==e)return{};var n,r,o=function(e,a){if(null==e)return{};var n,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],a.indexOf(n)>=0||(o[n]=e[n]);return o}(e,a);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=r.createContext({}),l=function(e){var a=r.useContext(i),n=a;return e&&(n="function"==typeof e?e(a):t(t({},a),e)),n},u=function(e){var a=l(e.components);return r.createElement(i.Provider,{value:a},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var a=e.children;return r.createElement(r.Fragment,{},a)}},m=r.forwardRef((function(e,a){var n=e.components,o=e.mdxType,s=e.originalType,i=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),p=l(n),m=o,y=p["".concat(i,".").concat(m)]||p[m]||d[m]||s;return n?r.createElement(y,t(t({ref:a},u),{},{components:n})):r.createElement(y,t({ref:a},u))}));function y(e,a){var n=arguments,o=a&&a.mdxType;if("string"==typeof e||o){var s=n.length,t=new Array(s);t[0]=m;var c={};for(var i in a)hasOwnProperty.call(a,i)&&(c[i]=a[i]);c.originalType=e,c[p]="string"==typeof e?e:o,t[1]=c;for(var l=2;l<s;l++)t[l]=n[l];return r.createElement.apply(null,t)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7041:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>i,contentTitle:()=>t,default:()=>p,frontMatter:()=>s,metadata:()=>c,toc:()=>l});var r=n(7462),o=(n(7294),n(3905));const s={},t="Funciones As\xedncronas en JavaScript",c={unversionedId:"MODULO 4/Promesas y funciones asincronas",id:"MODULO 4/Promesas y funciones asincronas",title:"Funciones As\xedncronas en JavaScript",description:"En JavaScript, las funciones asincr\xf3nicas proporcionan una forma m\xe1s limpia y sencilla de manejar tareas as\xedncronas. Estas tareas pueden incluir operaciones de red, acceso a bases de datos, lectura y escritura de archivos, y otras operaciones que pueden llevar tiempo en completarse. Las funciones asincr\xf3nicas utilizan la palabra clave async antes de la palabra clave function, lo que indica que la funci\xf3n es as\xedncrona y que devolver\xe1 una promesa. Aqu\xed tienes un ejemplo de c\xf3mo se declara una funci\xf3n asincr\xf3nica:",source:"@site/docs/MODULO 4/06-Promesas y funciones asincronas.md",sourceDirName:"MODULO 4",slug:"/MODULO 4/Promesas y funciones asincronas",permalink:"/docs/MODULO 4/Promesas y funciones asincronas",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/MODULO 4/06-Promesas y funciones asincronas.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Introducci\xf3n a Bootstrap",permalink:"/docs/MODULO 4/Bootstrap"}},i={},l=[{value:"Promesas en JavaScript",id:"promesas-en-javascript",level:2},{value:"Aqu\xed tienes un ejemplo de c\xf3mo crear una promesa y resolverla o rechazarla:",id:"aqu\xed-tienes-un-ejemplo-de-c\xf3mo-crear-una-promesa-y-resolverla-o-rechazarla",level:4},{value:"Uso de <code>then</code> y <code>catch</code>",id:"uso-de-then-y-catch",level:2},{value:"Uso de <code>try</code> y <code>catch</code>",id:"uso-de-try-y-catch",level:2},{value:"Conclusi\xf3n",id:"conclusi\xf3n",level:2},{value:"Video recomendado",id:"video-recomendado",level:2}],u={toc:l};function p(e){let{components:a,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:a,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"funciones-as\xedncronas-en-javascript"},"Funciones As\xedncronas en JavaScript"),(0,o.kt)("p",null,"En JavaScript, las funciones asincr\xf3nicas proporcionan una forma m\xe1s limpia y sencilla de manejar tareas as\xedncronas. Estas tareas pueden incluir operaciones de red, acceso a bases de datos, lectura y escritura de archivos, y otras operaciones que pueden llevar tiempo en completarse. Las funciones asincr\xf3nicas utilizan la palabra clave ",(0,o.kt)("inlineCode",{parentName:"p"},"async")," antes de la palabra clave ",(0,o.kt)("inlineCode",{parentName:"p"},"function"),", lo que indica que la funci\xf3n es as\xedncrona y que devolver\xe1 una promesa. Aqu\xed tienes un ejemplo de c\xf3mo se declara una funci\xf3n asincr\xf3nica:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"async function miFuncionAsincronica() {\n  // C\xf3digo as\xedncrono utilizando await\n  const resultado = await funcionQueDevuelveUnaPromesa();\n  return resultado;\n}\n")),(0,o.kt)("p",null,"Dentro de una funci\xf3n asincr\xf3nica, podemos utilizar la expresi\xf3n ",(0,o.kt)("inlineCode",{parentName:"p"},"await")," para pausar la ejecuci\xf3n de la funci\xf3n hasta que una promesa se resuelva o se rechace. Esto evita el anidamiento excesivo de callbacks y hace que el c\xf3digo as\xedncrono sea m\xe1s legible y f\xe1cil de mantener."),(0,o.kt)("h2",{id:"promesas-en-javascript"},"Promesas en JavaScript"),(0,o.kt)("p",null,"Las promesas son objetos que representan un valor que puede estar disponible ahora, en el futuro o nunca. Una promesa puede estar en uno de los siguientes estados:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"Pending (Pendiente):")," La promesa est\xe1 en curso y a\xfan no ha sido resuelta o rechazada."),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"Fulfilled (Cumplida):")," La promesa se resolvi\xf3 satisfactoriamente y tiene un valor."),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"Rejected (Rechazada):")," La promesa fue rechazada y tiene un motivo para el rechazo.")),(0,o.kt)("p",null,"Las promesas son especialmente \xfatiles cuando trabajamos con c\xf3digo as\xedncrono, ya que nos permiten manejar el resultado o el motivo del rechazo de manera m\xe1s estructurada. Aqu\xed tienes un ejemplo de c\xf3mo se crea una promesa y se resuelve o rechaza:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const miPromesa = new Promise((resolve, reject) => {\n  // Realiza una operaci\xf3n as\xedncrona aqu\xed\n  // Si se completa satisfactoriamente, llama a resolve() con el valor resultante\n  // Si ocurre un error, llama a reject() con el motivo del error\n});\n")),(0,o.kt)("h4",{id:"aqu\xed-tienes-un-ejemplo-de-c\xf3mo-crear-una-promesa-y-resolverla-o-rechazarla"},"Aqu\xed tienes un ejemplo de c\xf3mo crear una promesa y resolverla o rechazarla:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"// Funci\xf3n que simula una operaci\xf3n as\xedncrona que resuelve o rechaza una promesa\nfunction operacionAsincrona() {\n  return new Promise((resolve, reject) => {\n    // Simulamos un tiempo de espera de 2 segundos antes de resolver la promesa\n    setTimeout(() => {\n      const exito = true; // Cambiar a false para simular el rechazo de la promesa\n      if (exito) {\n        const resultado = '\xa1Operaci\xf3n exitosa!';\n        resolve(resultado); // Resuelve la promesa con el resultado\n      } else {\n        const motivo = 'Error en la operaci\xf3n';\n        reject(motivo); // Rechaza la promesa con el motivo del error\n      }\n    }, 2000); // 2000 milisegundos = 2 segundos\n  });\n}\n\n// Uso de la promesa\nconsole.log('Iniciando operaci\xf3n asincr\xf3nica...');\nmiPromesa\n  .then((resultado) => {\n    console.log('Promesa resuelta:', resultado);\n  })\n  .catch((error) => {\n    console.error('Promesa rechazada:', error);\n  });\n")),(0,o.kt)("p",null,"En este ejemplo, la funci\xf3n ",(0,o.kt)("inlineCode",{parentName:"p"},"operacionAsincrona()")," crea una promesa que simula una operaci\xf3n as\xedncrona con un tiempo de espera de 2 segundos. Si la variable ",(0,o.kt)("inlineCode",{parentName:"p"},"exito")," es ",(0,o.kt)("inlineCode",{parentName:"p"},"true"),', la promesa se resolver\xe1 con el mensaje "\xa1Operaci\xf3n exitosa!" despu\xe9s de 2 segundos. Si ',(0,o.kt)("inlineCode",{parentName:"p"},"exito")," es ",(0,o.kt)("inlineCode",{parentName:"p"},"false"),', la promesa ser\xe1 rechazada con el mensaje "Error en la operaci\xf3n".'),(0,o.kt)("p",null,"Al utilizar la promesa creada, el m\xe9todo ",(0,o.kt)("inlineCode",{parentName:"p"},"then()")," se ejecutar\xe1 cuando la promesa se resuelva exitosamente, y el m\xe9todo ",(0,o.kt)("inlineCode",{parentName:"p"},"catch()")," se ejecutar\xe1 si la promesa es rechazada. Dependiendo del valor de ",(0,o.kt)("inlineCode",{parentName:"p"},"exito"),', ver\xe1s en la consola un mensaje de "Promesa resuelta" o "Promesa rechazada" junto con el resultado o motivo del rechazo.'),(0,o.kt)("h2",{id:"uso-de-then-y-catch"},"Uso de ",(0,o.kt)("inlineCode",{parentName:"h2"},"then")," y ",(0,o.kt)("inlineCode",{parentName:"h2"},"catch")),(0,o.kt)("p",null,"Una de las ventajas m\xe1s destacadas de las promesas es la capacidad de encadenar m\xe9todos ",(0,o.kt)("inlineCode",{parentName:"p"},"then()")," y ",(0,o.kt)("inlineCode",{parentName:"p"},"catch()")," para manejar el resultado o el motivo del rechazo de una promesa. El m\xe9todo ",(0,o.kt)("inlineCode",{parentName:"p"},"then()")," se utiliza para manejar el resultado cuando una promesa se resuelve correctamente, mientras que el m\xe9todo ",(0,o.kt)("inlineCode",{parentName:"p"},"catch()")," se utiliza para manejar el motivo del rechazo de la promesa."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"miPromesa\n  .then((resultado) => {\n    // Manejar el resultado si la promesa se resuelve correctamente\n    console.log('Promesa resuelta:', resultado);\n  })\n  .catch((error) => {\n    // Manejar el error en caso de que la promesa sea rechazada\n    console.error('Promesa rechazada:', error);\n  });\n")),(0,o.kt)("p",null,"El m\xe9todo ",(0,o.kt)("inlineCode",{parentName:"p"},"then()")," puede recibir una funci\xf3n de retorno que se ejecutar\xe1 cuando la promesa se resuelva satisfactoriamente, y el m\xe9todo ",(0,o.kt)("inlineCode",{parentName:"p"},"catch()")," puede recibir una funci\xf3n de retorno que se ejecutar\xe1 cuando la promesa sea rechazada. Esto proporciona una forma m\xe1s organizada y estructurada de manejar los resultados y errores de las promesas."),(0,o.kt)("h2",{id:"uso-de-try-y-catch"},"Uso de ",(0,o.kt)("inlineCode",{parentName:"h2"},"try")," y ",(0,o.kt)("inlineCode",{parentName:"h2"},"catch")),(0,o.kt)("p",null,"Adem\xe1s de las promesas, tambi\xe9n podemos utilizar bloques ",(0,o.kt)("inlineCode",{parentName:"p"},"try")," y ",(0,o.kt)("inlineCode",{parentName:"p"},"catch")," para manejar excepciones en c\xf3digo s\xedncrono y en c\xf3digo as\xedncrono dentro de una funci\xf3n asincr\xf3nica. El bloque ",(0,o.kt)("inlineCode",{parentName:"p"},"try")," contiene el c\xf3digo que puede lanzar una excepci\xf3n, mientras que el bloque ",(0,o.kt)("inlineCode",{parentName:"p"},"catch")," se ejecuta si se produce una excepci\xf3n en el bloque ",(0,o.kt)("inlineCode",{parentName:"p"},"try"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"async function miFuncionAsincronica() {\n  try {\n    const resultado = await funcionQueDevuelveUnaPromesa();\n    // C\xf3digo que se ejecuta si la promesa se resuelve correctamente\n    return resultado;\n  } catch (error) {\n    // C\xf3digo que se ejecuta si la promesa es rechazada o si ocurre un error en el bloque try\n    console.error('Ocurri\xf3 un error:', error);\n    throw error; // Si deseas propagar el error al siguiente nivel\n  }\n}\n")),(0,o.kt)("p",null,"El uso de ",(0,o.kt)("inlineCode",{parentName:"p"},"try")," y ",(0,o.kt)("inlineCode",{parentName:"p"},"catch")," nos permite manejar errores de manera m\xe1s efectiva, evitando que el programa se bloquee por completo si ocurre un error y proporcionando una forma de manejar y recuperarse de las excepciones."),(0,o.kt)("h2",{id:"conclusi\xf3n"},"Conclusi\xf3n"),(0,o.kt)("p",null,"En resumen, las funciones asincr\xf3nicas y las promesas son herramientas poderosas en JavaScript que nos permiten trabajar con c\xf3digo as\xedncrono de manera m\xe1s estructurada y legible. La combinaci\xf3n de ",(0,o.kt)("inlineCode",{parentName:"p"},"then")," y ",(0,o.kt)("inlineCode",{parentName:"p"},"catch")," nos permite manejar los resultados y errores de las promesas de manera m\xe1s organizada, evitando el temido callback hell y permiti\xe9ndonos escribir c\xf3digo m\xe1s claro y mantenible."),(0,o.kt)("p",null,"Al utilizar funciones asincr\xf3nicas junto con las promesas, podemos lograr una programaci\xf3n as\xedncrona m\xe1s eficiente y m\xe1s f\xe1cil de leer, lo que mejora la experiencia de desarrollo y evita problemas comunes asociados con tareas as\xedncronas."),(0,o.kt)("p",null,"El uso de try y catch tambi\xe9n es muy \xfatil para manejar excepciones en c\xf3digo as\xedncrono. Esto nos permite capturar y manejar errores que puedan ocurrir dentro de una funci\xf3n asincr\xf3nica y tomar decisiones en base a estos errores para asegurarnos de que nuestra aplicaci\xf3n se comporte de manera adecuada incluso en situaciones inesperadas."),(0,o.kt)("p",null,"Es importante destacar que, aunque las funciones asincr\xf3nicas, las promesas y el manejo de errores con then, catch, try y catch son herramientas poderosas, tambi\xe9n es importante utilizarlas con precauci\xf3n y conocimiento. Es necesario comprender c\xf3mo funciona el flujo as\xedncrono en JavaScript y tener en cuenta las implicaciones de utilizar funciones asincr\xf3nicas en el rendimiento y la estructura del c\xf3digo."),(0,o.kt)("p",null,"En general, estas caracter\xedsticas proporcionan un enfoque m\xe1s moderno y eficiente para manejar operaciones as\xedncronas en JavaScript, lo que ha llevado a un c\xf3digo m\xe1s limpio y menos propenso a errores."),(0,o.kt)("h2",{id:"video-recomendado"},"Video recomendado"),(0,o.kt)("iframe",{width:"560",height:"315",src:"https://www.youtube.com/embed/rKK1q7nFt7M",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share",allowfullscreen:!0}))}p.isMDXComponent=!0}}]);