"use strict";(self.webpackChunkdesarrollo_web=self.webpackChunkdesarrollo_web||[]).push([[8731],{3905:(e,a,n)=>{n.d(a,{Zo:()=>d,kt:()=>v});var i=n(7294);function r(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function t(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);a&&(i=i.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?t(Object(n),!0).forEach((function(a){r(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):t(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function l(e,a){if(null==e)return{};var n,i,r=function(e,a){if(null==e)return{};var n,i,r={},t=Object.keys(e);for(i=0;i<t.length;i++)n=t[i],a.indexOf(n)>=0||(r[n]=e[n]);return r}(e,a);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);for(i=0;i<t.length;i++)n=t[i],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=i.createContext({}),s=function(e){var a=i.useContext(c),n=a;return e&&(n="function"==typeof e?e(a):o(o({},a),e)),n},d=function(e){var a=s(e.components);return i.createElement(c.Provider,{value:a},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var a=e.children;return i.createElement(i.Fragment,{},a)}},m=i.forwardRef((function(e,a){var n=e.components,r=e.mdxType,t=e.originalType,c=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=s(n),m=r,v=u["".concat(c,".").concat(m)]||u[m]||p[m]||t;return n?i.createElement(v,o(o({ref:a},d),{},{components:n})):i.createElement(v,o({ref:a},d))}));function v(e,a){var n=arguments,r=a&&a.mdxType;if("string"==typeof e||r){var t=n.length,o=new Array(t);o[0]=m;var l={};for(var c in a)hasOwnProperty.call(a,c)&&(l[c]=a[c]);l.originalType=e,l[u]="string"==typeof e?e:r,o[1]=l;for(var s=2;s<t;s++)o[s]=n[s];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5361:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>t,metadata:()=>l,toc:()=>s});var i=n(7462),r=(n(7294),n(3905));const t={},o="Hoisting en JavaScript",l={unversionedId:"MODULO 4/Hoisting",id:"MODULO 4/Hoisting",title:"Hoisting en JavaScript",description:"El hoisting en JavaScript es un comportamiento especial que ocurre durante la fase de compilaci\xf3n del c\xf3digo. Se refiere al movimiento de las declaraciones de variables y funciones hacia arriba en su \xe1mbito actual. Aunque puede parecer confuso, entender c\xf3mo funciona el hoisting puede ayudarte a evitar errores comunes.",source:"@site/docs/MODULO 4/03-Hoisting.md",sourceDirName:"MODULO 4",slug:"/MODULO 4/Hoisting",permalink:"/docs/MODULO 4/Hoisting",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/MODULO 4/03-Hoisting.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"\xc1mbito de una variable en JavaScript",permalink:"/docs/MODULO 4/Ambito de una variable"},next:{title:"\xbfQu\xe9 es el DOM?",permalink:"/docs/MODULO 4/Qu\xe9 es el DOM"}},c={},s=[{value:"Hoisting de variables",id:"hoisting-de-variables",level:2},{value:"Hoisting de funciones",id:"hoisting-de-funciones",level:2},{value:"Importancia de comprender el hoisting",id:"importancia-de-comprender-el-hoisting",level:2},{value:"Conclusi\xf3n",id:"conclusi\xf3n",level:2},{value:"Ejercicio: Orden de declaraci\xf3n",id:"ejercicio-orden-de-declaraci\xf3n",level:2}],d={toc:s};function u(e){let{components:a,...n}=e;return(0,r.kt)("wrapper",(0,i.Z)({},d,n,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"hoisting-en-javascript"},"Hoisting en JavaScript"),(0,r.kt)("p",null,"El hoisting en JavaScript es un comportamiento especial que ocurre durante la fase de compilaci\xf3n del c\xf3digo. Se refiere al movimiento de las declaraciones de variables y funciones hacia arriba en su \xe1mbito actual. Aunque puede parecer confuso, entender c\xf3mo funciona el hoisting puede ayudarte a evitar errores comunes."),(0,r.kt)("h2",{id:"hoisting-de-variables"},"Hoisting de variables"),(0,r.kt)("p",null,"En JavaScript, cuando declaras una variable utilizando la palabra clave ",(0,r.kt)("inlineCode",{parentName:"p"},"var")," o ",(0,r.kt)("inlineCode",{parentName:"p"},"let"),", la declaraci\xf3n se mueve autom\xe1ticamente al comienzo de su \xe1mbito actual durante la fase de compilaci\xf3n. Sin embargo, la asignaci\xf3n de valor permanece en su lugar. Esto significa que puedes acceder a una variable antes de su declaraci\xf3n y no obtendr\xe1s un error."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'console.log(mensaje); // Salida: undefined\nvar mensaje = "Hola, mundo!";\nconsole.log(mensaje); // Salida: "Hola, mundo!"\n')),(0,r.kt)("p",null,"En el ejemplo anterior, la variable ",(0,r.kt)("inlineCode",{parentName:"p"},"mensaje")," se declara m\xe1s adelante en el c\xf3digo, pero cuando intentamos acceder a ella antes de su declaraci\xf3n, obtenemos ",(0,r.kt)("inlineCode",{parentName:"p"},"undefined"),". Esto ocurre debido al hoisting, donde la declaraci\xf3n de la variable se mueve al principio del \xe1mbito actual."),(0,r.kt)("h2",{id:"hoisting-de-funciones"},"Hoisting de funciones"),(0,r.kt)("p",null,"El hoisting tambi\xe9n se aplica a las funciones en JavaScript. Las declaraciones de funciones se mueven al principio del \xe1mbito actual, lo que significa que puedes llamar a una funci\xf3n antes de su declaraci\xf3n."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'saludar(); // Salida: "\xa1Hola!"\n\nfunction saludar() {\n  console.log("\xa1Hola!");\n}\n')),(0,r.kt)("p",null,"En este ejemplo, la funci\xf3n ",(0,r.kt)("inlineCode",{parentName:"p"},"saludar")," se llama antes de su declaraci\xf3n, pero a\xfan as\xed funciona correctamente debido al hoisting. La declaraci\xf3n de la funci\xf3n se mueve al principio del \xe1mbito actual durante la compilaci\xf3n."),(0,r.kt)("h2",{id:"importancia-de-comprender-el-hoisting"},"Importancia de comprender el hoisting"),(0,r.kt)("p",null,"Es importante tener en cuenta el hoisting en JavaScript para evitar comportamientos inesperados. Aunque el hoisting puede resultar \xfatil en ciertos casos, puede llevar a errores sutiles si no se comprende correctamente."),(0,r.kt)("p",null,"Para evitar confusiones, se recomienda seguir buenas pr\xe1cticas de programaci\xf3n, como declarar todas las variables y funciones al comienzo de su \xe1mbito y evitar depender del hoisting en tu c\xf3digo."),(0,r.kt)("h2",{id:"conclusi\xf3n"},"Conclusi\xf3n"),(0,r.kt)("p",null,"El hoisting en JavaScript es el comportamiento especial que mueve las declaraciones de variables y funciones al comienzo de su \xe1mbito actual durante la fase de compilaci\xf3n. Esto permite acceder a las variables y funciones antes de su declaraci\xf3n, pero puede llevar a errores si no se comprende adecuadamente. Es fundamental seguir buenas pr\xe1cticas de programaci\xf3n y declarar las variables y funciones en su lugar apropiado para evitar confusiones y errores."),(0,r.kt)("h2",{id:"ejercicio-orden-de-declaraci\xf3n"},"Ejercicio: Orden de declaraci\xf3n"),(0,r.kt)("p",null,"Crea un c\xf3digo en JavaScript que muestre el orden de declaraci\xf3n de variables y funciones utilizando el hoisting. Debes declarar variables y funciones en diferentes posiciones dentro del c\xf3digo y luego imprimir su orden de ejecuci\xf3n."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Declara una variable llamada ",(0,r.kt)("inlineCode",{parentName:"p"},"mensaje")," y as\xedgnale el valor ",(0,r.kt)("inlineCode",{parentName:"p"},'"Hola"'),". Luego, declara una funci\xf3n llamada ",(0,r.kt)("inlineCode",{parentName:"p"},"saludar")," que imprima en la consola el valor de la variable ",(0,r.kt)("inlineCode",{parentName:"p"},"mensaje"),".")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Dentro de la funci\xf3n ",(0,r.kt)("inlineCode",{parentName:"p"},"saludar"),", declara una variable llamada ",(0,r.kt)("inlineCode",{parentName:"p"},"mensaje")," y as\xedgnale el valor ",(0,r.kt)("inlineCode",{parentName:"p"},'"Adi\xf3s"'),". Luego, imprime en la consola el valor de esta nueva variable.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Llama a la funci\xf3n ",(0,r.kt)("inlineCode",{parentName:"p"},"saludar"),"."))))}u.isMDXComponent=!0}}]);