"use strict";(self.webpackChunkdesarrollo_web=self.webpackChunkdesarrollo_web||[]).push([[4876],{3905:(e,a,r)=>{r.d(a,{Zo:()=>p,kt:()=>m});var o=r(7294);function n(e,a,r){return a in e?Object.defineProperty(e,a,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[a]=r,e}function s(e,a){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);a&&(o=o.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),r.push.apply(r,o)}return r}function l(e){for(var a=1;a<arguments.length;a++){var r=null!=arguments[a]?arguments[a]:{};a%2?s(Object(r),!0).forEach((function(a){n(e,a,r[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(r,a))}))}return e}function i(e,a){if(null==e)return{};var r,o,n=function(e,a){if(null==e)return{};var r,o,n={},s=Object.keys(e);for(o=0;o<s.length;o++)r=s[o],a.indexOf(r)>=0||(n[r]=e[r]);return n}(e,a);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(o=0;o<s.length;o++)r=s[o],a.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var t=o.createContext({}),d=function(e){var a=o.useContext(t),r=a;return e&&(r="function"==typeof e?e(a):l(l({},a),e)),r},p=function(e){var a=d(e.components);return o.createElement(t.Provider,{value:a},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var a=e.children;return o.createElement(o.Fragment,{},a)}},v=o.forwardRef((function(e,a){var r=e.components,n=e.mdxType,s=e.originalType,t=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=d(r),v=n,m=u["".concat(t,".").concat(v)]||u[v]||c[v]||s;return r?o.createElement(m,l(l({ref:a},p),{},{components:r})):o.createElement(m,l({ref:a},p))}));function m(e,a){var r=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var s=r.length,l=new Array(s);l[0]=v;var i={};for(var t in a)hasOwnProperty.call(a,t)&&(i[t]=a[t]);i.originalType=e,i[u]="string"==typeof e?e:n,l[1]=i;for(var d=2;d<s;d++)l[d]=r[d];return o.createElement.apply(null,l)}return o.createElement.apply(null,r)}v.displayName="MDXCreateElement"},9274:(e,a,r)=>{r.r(a),r.d(a,{assets:()=>t,contentTitle:()=>l,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>d});var o=r(7462),n=(r(7294),r(3905));const s={},l=void 0,i={unversionedId:"MODULO 3/Operadores y expresiones",id:"MODULO 3/Operadores y expresiones",title:"Operadores y expresiones",description:"Introducci\xf3n",source:"@site/docs/MODULO 3/01-Operadores y expresiones.md",sourceDirName:"MODULO 3",slug:"/MODULO 3/Operadores y expresiones",permalink:"/docs/MODULO 3/Operadores y expresiones",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/MODULO 3/01-Operadores y expresiones.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Fundamentos de Javascript",permalink:"/docs/MODULO 3/Fundamentos de Javascript"},next:{title:"Condicionales",permalink:"/docs/MODULO 3/Condicionales"}},t={},d=[{value:"Introducci\xf3n",id:"introducci\xf3n",level:2},{value:"Operadores:",id:"operadores",level:3},{value:"Operadores aritm\xe9ticos:",id:"operadores-aritm\xe9ticos",level:4},{value:"Operadores de comparaci\xf3n:",id:"operadores-de-comparaci\xf3n",level:4},{value:"Operadores l\xf3gicos:",id:"operadores-l\xf3gicos",level:4},{value:"Operadores de asignaci\xf3n:",id:"operadores-de-asignaci\xf3n",level:4},{value:"Operadores de cadena:",id:"operadores-de-cadena",level:4},{value:"Operadores de tipo:",id:"operadores-de-tipo",level:4},{value:"Operadores condicionales ternarios:",id:"operadores-condicionales-ternarios",level:4},{value:"Expresiones:",id:"expresiones",level:3}],p={toc:d};function u(e){let{components:a,...r}=e;return(0,n.kt)("wrapper",(0,o.Z)({},p,r,{components:a,mdxType:"MDXLayout"}),(0,n.kt)("h2",{id:"introducci\xf3n"},"Introducci\xf3n"),(0,n.kt)("p",null,"Los operadores y expresiones son elementos fundamentales en JavaScript que se utilizan para realizar operaciones y c\xe1lculos en el c\xf3digo. Los operadores son s\xedmbolos o palabras reservadas que se utilizan para indicar una acci\xf3n a realizar, como sumar, restar, comparar valores, etc. Las expresiones son combinaciones de valores, variables, operadores y llamadas a funciones que se utilizan para producir un resultado."),(0,n.kt)("p",null,"En JavaScript existen diferentes tipos de operadores, como los aritm\xe9ticos (para realizar operaciones matem\xe1ticas), los de asignaci\xf3n (para asignar valores a variables), los de comparaci\xf3n (para comparar valores), los l\xf3gicos (para evaluar expresiones booleanas) y los ternarios (para realizar una evaluaci\xf3n condicional)."),(0,n.kt)("p",null,"Por su parte, las expresiones pueden ser simples o complejas, y pueden combinar varios operadores y valores. Por ejemplo, una expresi\xf3n sencilla podr\xeda ser 2 + 3, mientras que una expresi\xf3n m\xe1s compleja podr\xeda ser x = (2 + 3) * 4 / y, que utiliza varios operadores para realizar una serie de operaciones y asignar el resultado a la variable x."),(0,n.kt)("h3",{id:"operadores"},"Operadores:"),(0,n.kt)("p",null,"Los operadores se utilizan en JavaScript para realizar operaciones en valores o variables. Existen varios tipos de operadores en JavaScript, que se pueden clasificar en las siguientes categor\xedas:"),(0,n.kt)("h4",{id:"operadores-aritm\xe9ticos"},"Operadores aritm\xe9ticos:"),(0,n.kt)("p",null,"Estos operadores se utilizan para realizar operaciones matem\xe1ticas, como suma, resta, multiplicaci\xf3n, divisi\xf3n, m\xf3dulo (resto), incremento y decremento. Aqu\xed tienes algunos ejemplos:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"var x = 10;\nvar y = 5;\nvar suma = x + y; // Suma de dos valores\nvar resta = x - y; // Resta de dos valores\nvar multiplicacion = x * y; // Multiplicaci\xf3n de dos valores\nvar division = x / y; // Divisi\xf3n de dos valores\nvar modulo = x % y; // M\xf3dulo de dos valores\nvar incremento = x++; // Incremento en una unidad del valor de x\nvar decremento = y--; // Decremento en una unidad del valor de y\n")),(0,n.kt)("h4",{id:"operadores-de-comparaci\xf3n"},"Operadores de comparaci\xf3n:"),(0,n.kt)("p",null,"Estos operadores se utilizan para comparar dos valores o variables y devuelven un valor booleano (true o false), indicando si la comparaci\xf3n es verdadera o falsa. Aqu\xed tienes algunos ejemplos:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"var x = 10;\nvar y = 5;\nvar igualdad = x == y; // Compara si x es igual a y\nvar desigualdad = x != y; // Compara si x es diferente a y\nvar mayorQue = x > y; // Compara si x es mayor que y\nvar mayorIgualQue = x >= y; // Compara si x es mayor o igual que y\nvar menorQue = x < y; // Compara si x es menor que y\nvar menorIgualQue = x <= y; // Compara si x es menor o igual que y\n")),(0,n.kt)("h4",{id:"operadores-l\xf3gicos"},"Operadores l\xf3gicos:"),(0,n.kt)("p",null,"Estos operadores se utilizan para combinar valores booleanos y devolver un valor booleano resultante. Los operadores l\xf3gicos en JavaScript son AND (&&), OR (||) y NOT (!). Aqu\xed tienes algunos ejemplos:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"var x = 10;\nvar y = 5;\nvar z = 2;\nvar and = (x > y) && (y > z); // AND l\xf3gico de dos expresiones booleanas\nvar or = (x < y) || (y < z); // OR l\xf3gico de dos expresiones booleanas\nvar not = !(x > y); // NOT l\xf3gico de una expresi\xf3n booleana\n")),(0,n.kt)("p",null,"Operador l\xf3gico AND (&&): El operador l\xf3gico AND se representa con dos ampersands (&&). Este operador devuelve true si ambos operandos son true, y false en cualquier otro caso. Por ejemplo:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"var a = true;\nvar b = false;\nvar resultado = a && b; // El resultado ser\xe1 false, ya que b es false\n")),(0,n.kt)("p",null,"En este caso, a es true y b es false, por lo tanto, la expresi\xf3n a && b devuelve false porque ambos operandos no son true."),(0,n.kt)("p",null,"Operador l\xf3gico OR (||): El operador l\xf3gico OR se representa con dos barras verticales (||). Este operador devuelve true si al menos uno de los operandos es true, y false si ambos operandos son false. Por ejemplo:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"var a = true;\nvar b = false;\nvar resultado = a || b; // El resultado ser\xe1 true, ya que a es true\n")),(0,n.kt)("p",null,"En este caso, a es true y b es false, por lo tanto, la expresi\xf3n a || b devuelve true porque al menos uno de los operandos es true."),(0,n.kt)("p",null,"Operador l\xf3gico NOT (!): El operador l\xf3gico NOT se representa con un signo de exclamaci\xf3n (!). Este operador invierte el valor de un operando booleano. Si el operando es true, el resultado ser\xe1 false, y si el operando es false, el resultado ser\xe1 true. Por ejemplo:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"var a = true;\nvar resultado = !a; // El resultado ser\xe1 false, ya que a es true\n")),(0,n.kt)("p",null,"En este caso, a es true, y al aplicar el operador ! sobre a, se invierte su valor, por lo tanto, el resultado es false."),(0,n.kt)("h4",{id:"operadores-de-asignaci\xf3n"},"Operadores de asignaci\xf3n:"),(0,n.kt)("p",null,"Estos operadores se utilizan para asignar valores a variables. Aqu\xed tienes algunos ejemplos:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},"var x = 10; // Asignaci\xf3n de un valor a una variable\nvar y = 5;\ny += x; // Asignaci\xf3n de la suma de dos valores a una variable\ny -= x; // Asignaci\xf3n de la resta de dos valores a una variable\ny *= x; // Asignaci\xf3n de la multiplicaci\xf3n de dos valores a una variable\ny /= x; // Asignaci\xf3n de la divisi\xf3n de dos valores a una variable\ny %= x; // Asignaci\xf3n del m\xf3dulo de dos valores a una variable\n")),(0,n.kt)("h4",{id:"operadores-de-cadena"},"Operadores de cadena:"),(0,n.kt)("p",null,"Estos operadores se utilizan para concatenar (unir) dos cadenas de texto. Aqu\xed tienes algunos ejemplos:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},'var x = "Hola";\nvar y = "Mundo";\nvar concatenacion = x + y; // Concatenaci\xf3n de dos cadenas de texto\nvar concatenacionEspacio = x + " " + y; // Concatenaci\xf3n de dos cadenas de texto con un espacio\n')),(0,n.kt)("h4",{id:"operadores-de-tipo"},"Operadores de tipo:"),(0,n.kt)("p",null,"Estos operadores se utilizan para comprobar el tipo de un valor o variable. Aqu\xed tienes algunos ejemplos:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},'var x = 10;\nvar y = "Hola";\nvar esNumero = typeof x === "number"; // Comprueba si x es un n\xfamero\nvar esCadena = typeof y === "string"; // Comprueba si y es una cadena de texto\n')),(0,n.kt)("h4",{id:"operadores-condicionales-ternarios"},"Operadores condicionales ternarios:"),(0,n.kt)("p",null,"Estos operadores se utilizan para realizar una evaluaci\xf3n condicional. Se trata de una forma abreviada de escribir una sentencia if-else. Aqu\xed tienes algunos ejemplos:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},'var x = 10;\nvar y = 5;\nvar resultado = x > y ? "x es mayor que y" : "x es menor o igual que y"; // Eval\xfaa una condici\xf3n y asigna un valor a una variable\n')),(0,n.kt)("h3",{id:"expresiones"},"Expresiones:"),(0,n.kt)("p",null,"Las expresiones son combinaciones de valores, variables y operadores que producen un valor. En JavaScript, las expresiones pueden ser tan simples o complejas como se necesite. Aqu\xed tienes algunos ejemplos de expresiones en JavaScript:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-js"},'var nombre = "Juan"; // Una expresi\xf3n que asigna la cadena "Juan" a la variable nombre\nvar saludo = "Hola " + nombre + "!"; // Una expresi\xf3n que combina varias cadenas usando el operador de concatenaci\xf3n (+)\nvar esMenorDeEdad = edad < 18; // Una expresi\xf3n que compara la variable edad con el valor 18 y devuelve un valor booleano\nvar resultado = (3 + 4) * (5 - 2); // Una expresi\xf3n que realiza varias operaciones aritm\xe9ticas y asigna el resultado a la variable resultado\nvar esPar = numero % 2 == 0; // Una expresi\xf3n que calcula el resto de la divisi\xf3n de la variable numero por 2 y comprueba si es igual a cero\n')),(0,n.kt)("p",null,"Es importante tener en cuenta que las expresiones en JavaScript se eval\xfaan de izquierda a derecha y de acuerdo a las reglas de precedencia de operadores. Tambi\xe9n es posible utilizar par\xe9ntesis para forzar un orden de evaluaci\xf3n espec\xedfico. Por ejemplo, en la expresi\xf3n 3 + 4 ",(0,n.kt)("em",{parentName:"p"}," 5, primero se realiza la multiplicaci\xf3n y luego la suma, porque el operador de multiplicaci\xf3n tiene mayor precedencia que el operador de suma. Si se desea cambiar el orden de evaluaci\xf3n para realizar primero la suma, se pueden utilizar par\xe9ntesis de la siguiente manera: (3 + 4) ")," 5."))}u.isMDXComponent=!0}}]);