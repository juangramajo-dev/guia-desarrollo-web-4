"use strict";(self.webpackChunkdesarrollo_web=self.webpackChunkdesarrollo_web||[]).push([[9520],{3905:(e,a,r)=>{r.d(a,{Zo:()=>d,kt:()=>v});var n=r(7294);function o(e,a,r){return a in e?Object.defineProperty(e,a,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[a]=r,e}function t(e,a){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var a=1;a<arguments.length;a++){var r=null!=arguments[a]?arguments[a]:{};a%2?t(Object(r),!0).forEach((function(a){o(e,a,r[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):t(Object(r)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(r,a))}))}return e}function s(e,a){if(null==e)return{};var r,n,o=function(e,a){if(null==e)return{};var r,n,o={},t=Object.keys(e);for(n=0;n<t.length;n++)r=t[n],a.indexOf(r)>=0||(o[r]=e[r]);return o}(e,a);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);for(n=0;n<t.length;n++)r=t[n],a.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var i=n.createContext({}),c=function(e){var a=n.useContext(i),r=a;return e&&(r="function"==typeof e?e(a):l(l({},a),e)),r},d=function(e){var a=c(e.components);return n.createElement(i.Provider,{value:a},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},m=n.forwardRef((function(e,a){var r=e.components,o=e.mdxType,t=e.originalType,i=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=c(r),m=o,v=u["".concat(i,".").concat(m)]||u[m]||p[m]||t;return r?n.createElement(v,l(l({ref:a},d),{},{components:r})):n.createElement(v,l({ref:a},d))}));function v(e,a){var r=arguments,o=a&&a.mdxType;if("string"==typeof e||o){var t=r.length,l=new Array(t);l[0]=m;var s={};for(var i in a)hasOwnProperty.call(a,i)&&(s[i]=a[i]);s.originalType=e,s[u]="string"==typeof e?e:o,l[1]=s;for(var c=2;c<t;c++)l[c]=r[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},7199:(e,a,r)=>{r.r(a),r.d(a,{assets:()=>i,contentTitle:()=>l,default:()=>u,frontMatter:()=>t,metadata:()=>s,toc:()=>c});var n=r(7462),o=(r(7294),r(3905));const t={},l=void 0,s={unversionedId:"MODULO 4/JavaScript avanzado",id:"MODULO 4/JavaScript avanzado",title:"JavaScript avanzado",description:"Introducci\xf3n",source:"@site/docs/MODULO 4/00-JavaScript avanzado.md",sourceDirName:"MODULO 4",slug:"/MODULO 4/JavaScript avanzado",permalink:"/docs/MODULO 4/JavaScript avanzado",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/MODULO 4/00-JavaScript avanzado.md",tags:[],version:"current",sidebarPosition:0,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Bucles",permalink:"/docs/MODULO 3/Bucles"},next:{title:"Funciones en JavaScript",permalink:"/docs/MODULO 4/Funciones"}},i={},c=[{value:"Introducci\xf3n",id:"introducci\xf3n",level:2},{value:"Comenc\xe9mos!",id:"comenc\xe9mos",level:2},{value:"Arrays",id:"arrays",level:2},{value:"Objetos",id:"objetos",level:2},{value:"M\xe9todos de arrays",id:"m\xe9todos-de-arrays",level:3},{value:"<code>push</code> y <code>pop</code> para agregar y eliminar elementos del final de un array:",id:"push-y-pop-para-agregar-y-eliminar-elementos-del-final-de-un-array",level:4},{value:"<code>shift</code> y <code>unshift</code> para agregar y eliminar elementos del inicio de un array:",id:"shift-y-unshift-para-agregar-y-eliminar-elementos-del-inicio-de-un-array",level:4},{value:"<code>slice</code> y <code>splice</code> para extraer o reemplazar elementos de un array:",id:"slice-y-splice-para-extraer-o-reemplazar-elementos-de-un-array",level:4},{value:"<code>sort</code> y <code>reverse</code> para ordenar los elementos de un array:",id:"sort-y-reverse-para-ordenar-los-elementos-de-un-array",level:4},{value:"<code>filter</code>, <code>map</code> y <code>reduce</code> para filtrar, mapear o reducir los elementos de un array:",id:"filter-map-y-reduce-para-filtrar-mapear-o-reducir-los-elementos-de-un-array",level:4},{value:"M\xe9todos de objetos",id:"m\xe9todos-de-objetos",level:3},{value:"Object.keys, Object.values, Object.entries para obtener una lista de las claves, valores o pares de un objeto:",id:"objectkeys-objectvalues-objectentries-para-obtener-una-lista-de-las-claves-valores-o-pares-de-un-objeto",level:4},{value:"Object.assign para copiar las propiedades de un objeto en otro:",id:"objectassign-para-copiar-las-propiedades-de-un-objeto-en-otro",level:4},{value:"Object.freeze y Object.seal para proteger o limitar la modificaci\xf3n de un objeto:",id:"objectfreeze-y-objectseal-para-proteger-o-limitar-la-modificaci\xf3n-de-un-objeto",level:4},{value:"Concluci\xf3n",id:"concluci\xf3n",level:2},{value:"Video recomendado",id:"video-recomendado",level:2}],d={toc:c};function u(e){let{components:a,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},d,r,{components:a,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"introducci\xf3n"},"Introducci\xf3n"),(0,o.kt)("p",null," El m\xf3dulo de JavaScript avanzado es una continuaci\xf3n del m\xf3dulo de fundamentos de JavaScript, en el que se profundiza en temas m\xe1s avanzados y se exploran nuevas herramientas y t\xe9cnicas para construir aplicaciones web din\xe1micas e interactivas."),(0,o.kt)("p",null,"Entre los temas que se suelen cubrir en el m\xf3dulo de JavaScript avanzado, se encuentran:"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Arrays y objetos"),": se profundiza en la utilizaci\xf3n de estas estructuras de datos en JavaScript, y se aprende a manipular y recorrer los elementos de un array, y las propiedades y m\xe9todos de un objeto."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Funciones"),": se profundiza en el uso de las funciones en JavaScript, incluyendo funciones an\xf3nimas, funciones de flecha, funciones recursivas, y funciones de orden superior. Tambi\xe9n se aborda el tema de los closures y la clausura de funciones."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Eventos y manipulaci\xf3n del DOM"),": se aprende a utilizar el modelo de eventos de JavaScript para detectar y responder a las acciones del usuario en la p\xe1gina web, y se exploran t\xe9cnicas para manipular el \xe1rbol del DOM (Document Object Model) de la p\xe1gina."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Utilizaci\xf3n de JavaScript y Bootstrap para crear una p\xe1gina web interactiva"),": se utiliza Bootstrap, un framework de dise\xf1o web, en conjunto con JavaScript para crear p\xe1ginas web interactivas que respondan a las acciones del usuario y proporcionen una experiencia de usuario m\xe1s din\xe1mica."),(0,o.kt)("p",null,"En resumen, el m\xf3dulo de JavaScript avanzado se enfoca en profundizar en los conceptos y t\xe9cnicas b\xe1sicas de JavaScript, y ense\xf1a nuevas habilidades y herramientas que permiten crear aplicaciones web m\xe1s avanzadas e interactivas."),(0,o.kt)("h2",{id:"comenc\xe9mos"},"Comenc\xe9mos!"),(0,o.kt)("h2",{id:"arrays"},"Arrays"),(0,o.kt)("p",null,"Un array es una colecci\xf3n ordenada de valores, que se identifican mediante un \xedndice num\xe9rico. En JavaScript, los arrays pueden contener elementos de diferentes tipos de datos, como n\xfameros, cadenas de texto, objetos, etc. Para crear un array en JavaScript, se utiliza la siguiente sintaxis:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"let miArray = [valor1, valor2, valor3, ...];\n")),(0,o.kt)("p",null,"Donde valor1, valor2, valor3, etc. son los elementos que se quieren almacenar en el array. Los elementos se separan con comas y se encierran entre corchetes."),(0,o.kt)("p",null,"Para acceder a un elemento espec\xedfico de un array, se utiliza su \xedndice num\xe9rico, que comienza en cero. Por ejemplo, si queremos acceder al segundo elemento de un array llamado miArray, se har\xeda de la siguiente manera:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'let miArray = ["manzana", "naranja", "pl\xe1tano"];\nlet segundoElemento = miArray[1]; // "naranja"\n\n')),(0,o.kt)("p",null,"En este caso, el \xedndice del segundo elemento es 1, ya que los \xedndices comienzan en cero."),(0,o.kt)("p",null,"Adem\xe1s de acceder a elementos individuales, es posible recorrer un array completo utilizando diferentes t\xe9cnicas, como bucles for, for-of, forEach, entre otros."),(0,o.kt)("h2",{id:"objetos"},"Objetos"),(0,o.kt)("p",null,"Un objeto es una colecci\xf3n de pares de claves y valores, donde cada clave se utiliza para identificar un valor espec\xedfico. En JavaScript, los objetos se representan mediante llaves {} y se utilizan para almacenar y manipular datos m\xe1s complejos. Para crear un objeto en JavaScript, se utiliza la siguiente sintaxis:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"let miObjeto = {\n  clave1: valor1,\n  clave2: valor2,\n  clave3: valor3,\n  ...\n};\n")),(0,o.kt)("p",null,"Donde clave1, clave2, clave3, etc. son las claves que se quieren utilizar para identificar los valores, y valor1, valor2, valor3, etc. son los valores que se quieren almacenar."),(0,o.kt)("p",null,"Para acceder a un valor espec\xedfico de un objeto, se utiliza la sintaxis objeto.clave. Por ejemplo, si queremos acceder al valor correspondiente a la clave clave2 de un objeto llamado miObjeto, se har\xeda de la siguiente manera:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'let miObjeto = { clave1: "valor1", clave2: "valor2", clave3: "valor3" };\nlet valorDeClave2 = miObjeto.clave2; // "valor2"\n')),(0,o.kt)("p",null,'En este caso, miObjeto.clave2 devuelve el valor "valor2", que es el valor correspondiente a la clave clave2.'),(0,o.kt)("p",null,"Adem\xe1s de acceder a valores individuales, es posible recorrer un objeto completo utilizando diferentes t\xe9cnicas, como bucles for-in o utilizando los m\xe9todos Object.keys, Object.values y Object.entries."),(0,o.kt)("h3",{id:"m\xe9todos-de-arrays"},"M\xe9todos de arrays"),(0,o.kt)("p",null,"JavaScript proporciona una gran cantidad de m\xe9todos predefinidos para trabajar con arrays, que permiten realizar operaciones como agregar o eliminar elementos, ordenarlos, filtrarlos, mapearlos, reducirlos, entre otros. Algunos de los m\xe9todos m\xe1s comunes son:"),(0,o.kt)("p",null,"push, pop, shift, unshift: para agregar o eliminar elementos del inicio o final de un array\nslice, splice: para extraer o reemplazar elementos de un array\nsort, reverse: para ordenar los elementos de un array\nfilter, map, reduce: para filtrar, mapear o reducir los elementos de un array"),(0,o.kt)("h4",{id:"push-y-pop-para-agregar-y-eliminar-elementos-del-final-de-un-array"},(0,o.kt)("inlineCode",{parentName:"h4"},"push")," y ",(0,o.kt)("inlineCode",{parentName:"h4"},"pop")," para agregar y eliminar elementos del final de un array:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"let fruits = ['apple', 'banana', 'orange'];\n\n// Agregar un elemento al final del array\nfruits.push('mango');\nconsole.log(fruits); // Output: ['apple', 'banana', 'orange', 'mango']\n\n// Eliminar el \xfaltimo elemento del array\nfruits.pop();\nconsole.log(fruits); // Output: ['apple', 'banana', 'orange']\n")),(0,o.kt)("h4",{id:"shift-y-unshift-para-agregar-y-eliminar-elementos-del-inicio-de-un-array"},(0,o.kt)("inlineCode",{parentName:"h4"},"shift")," y ",(0,o.kt)("inlineCode",{parentName:"h4"},"unshift")," para agregar y eliminar elementos del inicio de un array:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"let fruits = ['apple', 'banana', 'orange'];\n\n// Agregar un elemento al inicio del array\nfruits.unshift('mango');\nconsole.log(fruits); // Output: ['mango', 'apple', 'banana', 'orange']\n\n// Eliminar el primer elemento del array\nfruits.shift();\nconsole.log(fruits); // Output: ['apple', 'banana', 'orange']\n")),(0,o.kt)("h4",{id:"slice-y-splice-para-extraer-o-reemplazar-elementos-de-un-array"},(0,o.kt)("inlineCode",{parentName:"h4"},"slice")," y ",(0,o.kt)("inlineCode",{parentName:"h4"},"splice")," para extraer o reemplazar elementos de un array:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"let fruits = ['apple', 'banana', 'orange', 'mango'];\n\n// Extraer una porci\xf3n del array\nlet citrus = fruits.slice(1, 3);\nconsole.log(citrus); // Output: ['banana', 'orange']\n\n// Reemplazar elementos en el array\nfruits.splice(1, 2, 'grape', 'melon');\nconsole.log(fruits); // Output: ['apple', 'grape', 'melon', 'mango']\n\n")),(0,o.kt)("h4",{id:"sort-y-reverse-para-ordenar-los-elementos-de-un-array"},(0,o.kt)("inlineCode",{parentName:"h4"},"sort")," y ",(0,o.kt)("inlineCode",{parentName:"h4"},"reverse")," para ordenar los elementos de un array:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"let numbers = [4, 2, 7, 1, 9];\n\n// Ordenar los elementos del array de forma ascendente\nnumbers.sort();\nconsole.log(numbers); // Output: [1, 2, 4, 7, 9]\n\n// Ordenar los elementos del array de forma descendente\nnumbers.reverse();\nconsole.log(numbers); // Output: [9, 7, 4, 2, 1]\n")),(0,o.kt)("h4",{id:"filter-map-y-reduce-para-filtrar-mapear-o-reducir-los-elementos-de-un-array"},(0,o.kt)("inlineCode",{parentName:"h4"},"filter"),", ",(0,o.kt)("inlineCode",{parentName:"h4"},"map")," y ",(0,o.kt)("inlineCode",{parentName:"h4"},"reduce")," para filtrar, mapear o reducir los elementos de un array:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"let numbers = [1, 2, 3, 4, 5];\n\n// Filtrar los n\xfameros pares del array\nlet evenNumbers = numbers.filter(function (num) {\n  return num % 2 === 0;\n});\nconsole.log(evenNumbers); // Output: [2, 4]\n\n// Mapear los n\xfameros del array multiplic\xe1ndolos por 2\nlet doubledNumbers = numbers.map(function (num) {\n  return num * 2;\n});\nconsole.log(doubledNumbers); // Output: [2, 4, 6, 8, 10]\n\n// Reducir los n\xfameros del array a su suma total\nlet sum = numbers.reduce(function (accumulator, num) {\n  return accumulator + num;\n}, 0);\nconsole.log(sum); // Output: 15\n")),(0,o.kt)("h3",{id:"m\xe9todos-de-objetos"},"M\xe9todos de objetos"),(0,o.kt)("p",null,"Al igual que con los arrays, JavaScript proporciona una gran cantidad de m\xe9todos predefinidos para trabajar con objetos, que permiten realizar operaciones como agregar o eliminar claves, obtener una lista de las claves o valores, entre otros. Algunos de los m\xe9todos m\xe1s comunes son:"),(0,o.kt)("p",null,"Object.keys, Object.values, Object.entries: para obtener una lista de las claves, valores o pares de un objeto\nObject.assign: para copiar las propiedades de un objeto en otro\nObject.freeze, Object.seal: para proteger o limitar la modificaci\xf3n de un objeto"),(0,o.kt)("h4",{id:"objectkeys-objectvalues-objectentries-para-obtener-una-lista-de-las-claves-valores-o-pares-de-un-objeto"},"Object.keys, Object.values, Object.entries para obtener una lista de las claves, valores o pares de un objeto:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"var persona = {\n  nombre: 'Juan',\n  edad: 30,\n  ciudad: 'Madrid'\n};\n\n// Obtener las claves del objeto\nvar claves = Object.keys(persona);\nconsole.log(claves); // Salida: ['nombre', 'edad', 'ciudad']\n\n// Obtener los valores del objeto\nvar valores = Object.values(persona);\nconsole.log(valores); // Salida: ['Juan', 30, 'Madrid']\n\n// Obtener los pares [clave, valor] del objeto\nvar pares = Object.entries(persona);\nconsole.log(pares); // Salida: [['nombre', 'Juan'], ['edad', 30], ['ciudad', 'Madrid']]\n")),(0,o.kt)("h4",{id:"objectassign-para-copiar-las-propiedades-de-un-objeto-en-otro"},"Object.assign para copiar las propiedades de un objeto en otro:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"var obj1 = { a: 1, b: 2 };\nvar obj2 = { c: 3, d: 4 };\n\n// Copiar las propiedades de obj2 en obj1\nvar obj3 = Object.assign({}, obj1, obj2);\nconsole.log(obj3); // Salida: { a: 1, b: 2, c: 3, d: 4 }\n")),(0,o.kt)("h4",{id:"objectfreeze-y-objectseal-para-proteger-o-limitar-la-modificaci\xf3n-de-un-objeto"},"Object.freeze y Object.seal para proteger o limitar la modificaci\xf3n de un objeto:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"var persona = {\n  nombre: 'Juan',\n  edad: 30\n};\n\n// Congelar el objeto, evitando cualquier modificaci\xf3n\nObject.freeze(persona);\n\npersona.edad = 35; // No tiene efecto\nconsole.log(persona); // Salida: { nombre: 'Juan', edad: 30 }\n\n// Sellar el objeto, permitiendo modificar los valores existentes pero no agregar ni eliminar propiedades\nObject.seal(persona);\n\npersona.edad = 35; // Modificaci\xf3n permitida\npersona.ciudad = 'Madrid'; // No tiene efecto\ndelete persona.nombre; // No tiene efecto\nconsole.log(persona); // Salida: { nombre: 'Juan', edad: 35 }\n")),(0,o.kt)("h2",{id:"concluci\xf3n"},"Concluci\xf3n"),(0,o.kt)("p",null,"Los arrays y los objetos son dos estructuras de datos importantes en JavaScript que se utilizan para almacenar y manipular colecciones de datos. Los arrays se utilizan para colecciones de elementos ordenados, mientras que los objetos se utilizan para colecciones de pares de claves y valores."),(0,o.kt)("p",null,"En el \xe1mbito de la programaci\xf3n avanzada en JavaScript, es importante comprender en detalle c\xf3mo funcionan los arrays y los objetos. Adem\xe1s, existen diversas t\xe9cnicas y funcionalidades avanzadas que se pueden utilizar con arrays y objetos para crear aplicaciones web interactivas y eficientes."),(0,o.kt)("h2",{id:"video-recomendado"},"Video recomendado"),(0,o.kt)("iframe",{width:"560",height:"315",src:"https://www.youtube.com/embed/5DaZXXbHI_U",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share",allowfullscreen:!0}))}u.isMDXComponent=!0}}]);