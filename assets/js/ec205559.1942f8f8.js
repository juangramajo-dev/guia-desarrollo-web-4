"use strict";(self.webpackChunkdesarrollo_web=self.webpackChunkdesarrollo_web||[]).push([[262],{3905:(e,n,a)=>{a.d(n,{Zo:()=>s,kt:()=>f});var r=a(7294);function o(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function t(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,r)}return a}function i(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?t(Object(a),!0).forEach((function(n){o(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):t(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function u(e,n){if(null==e)return{};var a,r,o=function(e,n){if(null==e)return{};var a,r,o={},t=Object.keys(e);for(r=0;r<t.length;r++)a=t[r],n.indexOf(a)>=0||(o[a]=e[a]);return o}(e,n);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);for(r=0;r<t.length;r++)a=t[r],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var c=r.createContext({}),l=function(e){var n=r.useContext(c),a=n;return e&&(a="function"==typeof e?e(n):i(i({},n),e)),a},s=function(e){var n=l(e.components);return r.createElement(c.Provider,{value:n},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var a=e.components,o=e.mdxType,t=e.originalType,c=e.parentName,s=u(e,["components","mdxType","originalType","parentName"]),d=l(a),m=o,f=d["".concat(c,".").concat(m)]||d[m]||p[m]||t;return a?r.createElement(f,i(i({ref:n},s),{},{components:a})):r.createElement(f,i({ref:n},s))}));function f(e,n){var a=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var t=a.length,i=new Array(t);i[0]=m;var u={};for(var c in n)hasOwnProperty.call(n,c)&&(u[c]=n[c]);u.originalType=e,u[d]="string"==typeof e?e:o,i[1]=u;for(var l=2;l<t;l++)i[l]=a[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}m.displayName="MDXCreateElement"},9576:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>t,metadata:()=>u,toc:()=>l});var r=a(7462),o=(a(7294),a(3905));const t={},i="Funciones en JavaScript",u={unversionedId:"MODULO 4/Funciones",id:"MODULO 4/Funciones",title:"Funciones en JavaScript",description:"Introducci\xf3n",source:"@site/docs/MODULO 4/01-Funciones.md",sourceDirName:"MODULO 4",slug:"/MODULO 4/Funciones",permalink:"/docs/MODULO 4/Funciones",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/MODULO 4/01-Funciones.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"JavaScript avanzado",permalink:"/docs/MODULO 4/JavaScript avanzado"},next:{title:"\xc1mbito de una variable en JavaScript",permalink:"/docs/MODULO 4/Ambito de una variable"}},c={},l=[{value:"Introducci\xf3n",id:"introducci\xf3n",level:2},{value:"Funciones sin retorno",id:"funciones-sin-retorno",level:2},{value:"Funciones con retorno",id:"funciones-con-retorno",level:2},{value:"Retorno en una funci\xf3n",id:"retorno-en-una-funci\xf3n",level:2},{value:"Asignaci\xf3n de una funci\xf3n a una variable",id:"asignaci\xf3n-de-una-funci\xf3n-a-una-variable",level:2},{value:"Expresi\xf3n de una funci\xf3n",id:"expresi\xf3n-de-una-funci\xf3n",level:2},{value:"Funciones flecha",id:"funciones-flecha",level:2},{value:"Funciones como par\xe1metro de otra funci\xf3n",id:"funciones-como-par\xe1metro-de-otra-funci\xf3n",level:2},{value:"El concepto de hoisting en JavaScript",id:"el-concepto-de-hoisting-en-javascript",level:2},{value:"Video recomendado",id:"video-recomendado",level:2},{value:"Documentacion recomendada",id:"documentacion-recomendada",level:2}],s={toc:l};function d(e){let{components:n,...a}=e;return(0,o.kt)("wrapper",(0,r.Z)({},s,a,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"funciones-en-javascript"},"Funciones en JavaScript"),(0,o.kt)("h2",{id:"introducci\xf3n"},"Introducci\xf3n"),(0,o.kt)("p",null,"Las funciones en JavaScript son bloques de c\xf3digo reutilizables que pueden realizar tareas espec\xedficas. Permiten agrupar instrucciones y ejecutarlas cuando sea necesario. En este documento, exploraremos varios tipos de funciones y sus caracter\xedsticas."),(0,o.kt)("h2",{id:"funciones-sin-retorno"},"Funciones sin retorno"),(0,o.kt)("p",null,"Las funciones sin retorno en JavaScript son aquellas que ejecutan un bloque de c\xf3digo pero no devuelven ning\xfan valor. Se utilizan principalmente para realizar acciones o tareas sin necesidad de obtener un resultado."),(0,o.kt)("p",null,"A continuaci\xf3n, se muestra un ejemplo de una funci\xf3n sin retorno que muestra un mensaje en la consola:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'function saludar() {\n  console.log("\xa1Hola, mundo!");\n}\n\nsaludar(); // Llamada a la funci\xf3n\n')),(0,o.kt)("h2",{id:"funciones-con-retorno"},"Funciones con retorno"),(0,o.kt)("p",null,"Las funciones con retorno en JavaScript devuelven un valor despu\xe9s de ejecutar su c\xf3digo. Estas funciones son \xfatiles cuando necesitas obtener un resultado espec\xedfico."),(0,o.kt)("p",null,"A continuaci\xf3n, se muestra un ejemplo de una funci\xf3n con retorno que suma dos n\xfameros y devuelve el resultado:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"function sumar(a, b) {\n  return a + b;\n}\n\nvar resultado = sumar(3, 5); // Llamada a la funci\xf3n y asignaci\xf3n del resultado\nconsole.log(resultado); // Imprime 8\n")),(0,o.kt)("h2",{id:"retorno-en-una-funci\xf3n"},"Retorno en una funci\xf3n"),(0,o.kt)("p",null,"El retorno o return en una funci\xf3n de JavaScript se refiere al valor que una funci\xf3n devuelve al ser llamada. Especificar un valor de retorno es opcional y depende de la l\xf3gica y la necesidad de la funci\xf3n."),(0,o.kt)("p",null,"Cuando una funci\xf3n alcanza una declaraci\xf3n de retorno, su ejecuci\xf3n se detiene y el valor especificado se devuelve al punto de llamada. El retorno tambi\xe9n puede finalizar la ejecuci\xf3n de una funci\xf3n antes de alcanzar el final si se encuentra dentro de una estructura condicional o un bucle."),(0,o.kt)("p",null,"A continuaci\xf3n, se muestra un ejemplo de una funci\xf3n que suma dos n\xfameros y utiliza la declaraci\xf3n de retorno para devolver el resultado:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"function sumar(a, b) {\n  return a + b;\n}\n\nvar resultado = sumar(3, 5);\nconsole.log(resultado); // Imprime 8\n")),(0,o.kt)("p",null,"En este caso, la funci\xf3n ",(0,o.kt)("inlineCode",{parentName:"p"},"sumar")," recibe dos par\xe1metros ",(0,o.kt)("inlineCode",{parentName:"p"},"a")," y ",(0,o.kt)("inlineCode",{parentName:"p"},"b"),", y utiliza la declaraci\xf3n ",(0,o.kt)("inlineCode",{parentName:"p"},"return")," para devolver la suma de ambos valores. Al llamar a la funci\xf3n con ",(0,o.kt)("inlineCode",{parentName:"p"},"sumar(3, 5)"),", se devuelve el valor 8, que se asigna a la variable ",(0,o.kt)("inlineCode",{parentName:"p"},"resultado")," y se muestra en la consola."),(0,o.kt)("p",null,"El uso del retorno en una funci\xf3n es especialmente \xfatil cuando se necesita utilizar o procesar el resultado de una operaci\xf3n en otro lugar del programa."),(0,o.kt)("p",null,"Recuerda que una funci\xf3n puede tener m\xfaltiples declaraciones de retorno, pero solo se ejecutar\xe1 la primera que se encuentre en el flujo de ejecuci\xf3n de la funci\xf3n."),(0,o.kt)("h2",{id:"asignaci\xf3n-de-una-funci\xf3n-a-una-variable"},"Asignaci\xf3n de una funci\xf3n a una variable"),(0,o.kt)("p",null,"En JavaScript, puedes asignar una funci\xf3n a una variable. Esto permite utilizar la variable para llamar a la funci\xf3n y ejecutar su c\xf3digo."),(0,o.kt)("p",null,"A continuaci\xf3n, se muestra un ejemplo de asignaci\xf3n de una funci\xf3n a una variable y llamada a la funci\xf3n a trav\xe9s de la variable:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'var saludar = function() {\n  console.log("\xa1Hola, mundo!");\n};\n\nsaludar(); // Llamada a la funci\xf3n a trav\xe9s de la variable\n')),(0,o.kt)("h2",{id:"expresi\xf3n-de-una-funci\xf3n"},"Expresi\xf3n de una funci\xf3n"),(0,o.kt)("p",null,"Una expresi\xf3n de funci\xf3n en JavaScript es una forma de definir una funci\xf3n utilizando una expresi\xf3n en lugar de una declaraci\xf3n. Estas funciones se pueden utilizar de manera similar a las funciones asignadas a variables."),(0,o.kt)("p",null,"A continuaci\xf3n, se muestra un ejemplo de una expresi\xf3n de funci\xf3n que calcula el cuadrado de un n\xfamero:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"var cuadrado = function(x) {\n  return x * x;\n};\n\nvar resultado = cuadrado(4); // Llamada a la funci\xf3n expresi\xf3n\nconsole.log(resultado); // Imprime 16\n")),(0,o.kt)("h2",{id:"funciones-flecha"},"Funciones flecha"),(0,o.kt)("p",null,"Las funciones flecha, introducidas en ECMAScript 6, son una forma m\xe1s concisa de escribir funciones en JavaScript. Son especialmente \xfatiles cuando se trabaja con funciones an\xf3nimas."),(0,o.kt)("p",null,"A continuaci\xf3n, se muestra un ejemplo de una funci\xf3n flecha que multiplica dos n\xfameros:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"var multiplicar = (a, b) => a * b;\n\nvar resultado = multiplicar(2, 5); // Llamada a la funci\xf3n flecha\nconsole.log(resultado); // Imprime 10\n")),(0,o.kt)("h2",{id:"funciones-como-par\xe1metro-de-otra-funci\xf3n"},"Funciones como par\xe1metro de otra funci\xf3n"),(0,o.kt)("p",null,"En JavaScript, puedes pasar funciones como par\xe1metros a otras funciones. Esto se conoce como funciones de orden superior y permite la creaci\xf3n de patrones de programaci\xf3n m\xe1s flexibles y reutilizables."),(0,o.kt)("p",null,"A continuaci\xf3n, se muestra un ejemplo de una funci\xf3n que recibe otra funci\xf3n como par\xe1metro y la ejecuta:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'function ejecutarFuncion(funcion) {\n  funcion();\n}\n\nfunction saludar() {\n  console.log("\xa1Hola, mundo!");\n}\n\nej\n\necutarFuncion(saludar); // Llamada a la funci\xf3n con otra funci\xf3n como par\xe1metro\n')),(0,o.kt)("h2",{id:"el-concepto-de-hoisting-en-javascript"},"El concepto de hoisting en JavaScript"),(0,o.kt)("p",null,"El hoisting es un comportamiento especial en JavaScript que permite declarar variables y funciones antes de que se ejecuten. En otras palabras, puedes usar una variable o funci\xf3n antes de haberla declarado expl\xedcitamente en tu c\xf3digo."),(0,o.kt)("p",null,"A continuaci\xf3n, se muestra un ejemplo de hoisting con una funci\xf3n:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'saludar(); // Llamada a la funci\xf3n antes de la declaraci\xf3n\n\nfunction saludar() {\n  console.log("\xa1Hola, mundo!");\n}\n')),(0,o.kt)("p",null,"Recuerda que aunque el hoisting permite este comportamiento, es una buena pr\xe1ctica declarar tus variables y funciones en la parte superior de tu c\xf3digo para evitar confusiones."),(0,o.kt)("h2",{id:"video-recomendado"},"Video recomendado"),(0,o.kt)("iframe",{width:"560",height:"315",src:"https://www.youtube.com/embed/e3EyqGnb6XM",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share",allowfullscreen:!0}),(0,o.kt)("h2",{id:"documentacion-recomendada"},"Documentacion recomendada"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/es/docs/Web/JavaScript/Guide/Functions"},"Funciones en JavaScript")))}d.isMDXComponent=!0}}]);