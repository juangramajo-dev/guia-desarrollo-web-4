"use strict";(self.webpackChunkdesarrollo_web=self.webpackChunkdesarrollo_web||[]).push([[469],{3905:(e,a,l)=>{l.d(a,{Zo:()=>d,kt:()=>m});var n=l(7294);function o(e,a,l){return a in e?Object.defineProperty(e,a,{value:l,enumerable:!0,configurable:!0,writable:!0}):e[a]=l,e}function r(e,a){var l=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),l.push.apply(l,n)}return l}function i(e){for(var a=1;a<arguments.length;a++){var l=null!=arguments[a]?arguments[a]:{};a%2?r(Object(l),!0).forEach((function(a){o(e,a,l[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(l)):r(Object(l)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(l,a))}))}return e}function t(e,a){if(null==e)return{};var l,n,o=function(e,a){if(null==e)return{};var l,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)l=r[n],a.indexOf(l)>=0||(o[l]=e[l]);return o}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)l=r[n],a.indexOf(l)>=0||Object.prototype.propertyIsEnumerable.call(e,l)&&(o[l]=e[l])}return o}var u=n.createContext({}),c=function(e){var a=n.useContext(u),l=a;return e&&(l="function"==typeof e?e(a):i(i({},a),e)),l},d=function(e){var a=c(e.components);return n.createElement(u.Provider,{value:a},e.children)},s="mdxType",p={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},v=n.forwardRef((function(e,a){var l=e.components,o=e.mdxType,r=e.originalType,u=e.parentName,d=t(e,["components","mdxType","originalType","parentName"]),s=c(l),v=o,m=s["".concat(u,".").concat(v)]||s[v]||p[v]||r;return l?n.createElement(m,i(i({ref:a},d),{},{components:l})):n.createElement(m,i({ref:a},d))}));function m(e,a){var l=arguments,o=a&&a.mdxType;if("string"==typeof e||o){var r=l.length,i=new Array(r);i[0]=v;var t={};for(var u in a)hasOwnProperty.call(a,u)&&(t[u]=a[u]);t.originalType=e,t[s]="string"==typeof e?e:o,i[1]=t;for(var c=2;c<r;c++)i[c]=l[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,l)}v.displayName="MDXCreateElement"},651:(e,a,l)=>{l.r(a),l.d(a,{assets:()=>u,contentTitle:()=>i,default:()=>s,frontMatter:()=>r,metadata:()=>t,toc:()=>c});var n=l(7462),o=(l(7294),l(3905));const r={},i=void 0,t={unversionedId:"MODULO 3/Bucles",id:"MODULO 3/Bucles",title:"Bucles",description:"Introducci\xf3n",source:"@site/docs/MODULO 3/03-Bucles.md",sourceDirName:"MODULO 3",slug:"/MODULO 3/Bucles",permalink:"/en/docs/MODULO 3/Bucles",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/MODULO 3/03-Bucles.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Condicionales",permalink:"/en/docs/MODULO 3/Condicionales"},next:{title:"JavaScript avanzado",permalink:"/en/docs/MODULO 4/JavaScript avanzado"}},u={},c=[{value:"Introducci\xf3n",id:"introducci\xf3n",level:2},{value:"Bucle while",id:"bucle-while",level:3},{value:"Bucle do...while",id:"bucle-dowhile",level:3},{value:"Diferencias entre el bucle while y do-While",id:"diferencias-entre-el-bucle-while-y-do-while",level:3},{value:"Bucle for",id:"bucle-for",level:3},{value:"Bucle for...in",id:"bucle-forin",level:3},{value:"Bucle for...of",id:"bucle-forof",level:3}],d={toc:c};function s(e){let{components:a,...l}=e;return(0,o.kt)("wrapper",(0,n.Z)({},d,l,{components:a,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"introducci\xf3n"},"Introducci\xf3n"),(0,o.kt)("p",null,"En este m\xf3dulo aprenderemos sobre los bucles en JavaScript. Los bucles son una herramienta muy \xfatil para ejecutar un bloque de c\xf3digo repetidamente. En este m\xf3dulo aprenderemos sobre los bucles ",(0,o.kt)("inlineCode",{parentName:"p"},"while")," , ",(0,o.kt)("inlineCode",{parentName:"p"},"do while"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"for"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"for...in")," y  ",(0,o.kt)("inlineCode",{parentName:"p"},"for...of")," ."),(0,o.kt)("h3",{id:"bucle-while"},"Bucle while"),(0,o.kt)("p",null,"El bucle while se utiliza para repetir un bloque de c\xf3digo mientras una determinada condici\xf3n sea verdadera. Su sintaxis es la siguiente:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"while (condici\xf3n) {\n    // Bloque de c\xf3digo a repetir mientras la condici\xf3n sea verdadera\n}\n")),(0,o.kt)("p",null,"De nuevo, la condici\xf3n puede ser cualquier expresi\xf3n que se pueda evaluar como verdadera o falsa. Mientras la condici\xf3n sea verdadera, se ejecutar\xe1 el c\xf3digo dentro del bloque de llaves. Cuando la condici\xf3n se eval\xfae como falsa, se terminar\xe1 la ejecuci\xf3n del bucle."),(0,o.kt)("p",null,"Aqu\xed tienes un ejemplo:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"var i = 0;\n\nwhile (i < 10) {\n  console.log(i);\n  i++;\n}\n")),(0,o.kt)("p",null,"En este ejemplo, la condici\xf3n es i < 10, que se eval\xfaa como verdadera (true) porque la variable i tiene el valor 0, que es menor que 10. Por lo tanto, se ejecuta el c\xf3digo dentro del bloque de llaves, que muestra el valor de la variable i en la consola y le suma 1 a la variable i. Despu\xe9s, se eval\xfaa de nuevo la condici\xf3n, que ahora es i < 10, que se eval\xfaa como verdadera (true) porque la variable i tiene el valor 1, que es menor que 10. Por lo tanto, se ejecuta de nuevo el c\xf3digo dentro del bloque de llaves, que muestra el valor de la variable i en la consola y le suma 1 a la variable i. Despu\xe9s, se eval\xfaa de nuevo la condici\xf3n, que ahora es i < 10, que se eval\xfaa como verdadera (true) porque la variable i tiene el valor 2, que es menor que 10. Por lo tanto, se ejecuta de nuevo el c\xf3digo dentro del bloque de llaves, que muestra el valor de la variable i en la consola y le suma 1 a la variable i. Y as\xed sucesivamente hasta que la variable i tenga el valor 10, que es igual que 10, por lo que la condici\xf3n se eval\xfaa como falsa (false). Por lo tanto, se termina la ejecuci\xf3n del bucle."),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"bucle-dowhile"},"Bucle do...while"),(0,o.kt)("p",null,"El bucle do...while se utiliza para repetir un bloque de c\xf3digo mientras una determinada condici\xf3n sea verdadera. Su sintaxis es la siguiente:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"do {\n    // Bloque de c\xf3digo a repetir mientras la condici\xf3n sea verdadera\n} while (condici\xf3n);\n")),(0,o.kt)("p",null,"De nuevo, la condici\xf3n puede ser cualquier expresi\xf3n que se pueda evaluar como verdadera o falsa. El c\xf3digo dentro del bloque de llaves se ejecutar\xe1 al menos una vez, y despu\xe9s se evaluar\xe1 la condici\xf3n. Mientras la condici\xf3n sea verdadera, se ejecutar\xe1 de nuevo el c\xf3digo dentro del bloque de llaves. Cuando la condici\xf3n se eval\xfae como falsa, se terminar\xe1 la ejecuci\xf3n del bucle."),(0,o.kt)("p",null,"Aqu\xed tienes un ejemplo:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"var i = 0;\n\ndo {\n  console.log(i);\n  i++;\n} while (i < 10);\n")),(0,o.kt)("p",null,"En este ejemplo, el c\xf3digo dentro del bloque de llaves se ejecuta al menos una vez, porque la condici\xf3n es i < 10, que se eval\xfaa como verdadera (true) porque la variable i tiene el valor 0, que es menor que 10. Por lo tanto, se ejecuta el c\xf3digo dentro del bloque de llaves, que muestra el valor de la variable i en la consola y le suma 1 a la variable i. Despu\xe9s, se eval\xfaa la condici\xf3n, que ahora es i < 10, que se eval\xfaa como verdadera (true) porque la variable i tiene el valor 1, que es menor que 10. Por lo tanto, se ejecuta de nuevo el c\xf3digo dentro del bloque de llaves, que muestra el valor de la variable i en la consola y le suma 1 a la variable i. Despu\xe9s, se eval\xfaa la condici\xf3n, que ahora es i < 10, que se eval\xfaa como verdadera (true) porque la variable i tiene el valor 2, que es menor que 10. Por lo tanto, se ejecuta de nuevo el c\xf3digo dentro del bloque de llaves, que muestra el valor de la variable i en la consola y le suma 1 a la variable i. Y as\xed sucesivamente hasta que la variable i tenga el valor 10, que es igual que 10, por lo que la condici\xf3n se eval\xfaa como falsa (false). Por lo tanto, se termina la ejecuci\xf3n del bucle."),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"diferencias-entre-el-bucle-while-y-do-while"},"Diferencias entre el bucle while y do-While"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"La diferencia principal entre el bucle while y el bucle do-while en JavaScript radica en el momento en que se eval\xfaa la condici\xf3n de finalizaci\xf3n del bucle.")),(0,o.kt)("p",null,"Bucle while: En el bucle while, primero se eval\xfaa la condici\xf3n antes de ejecutar el bloque de c\xf3digo. Si la condici\xf3n es verdadera, el bloque de c\xf3digo se ejecuta. Si la condici\xf3n es falsa desde el principio, el bloque de c\xf3digo nunca se ejecuta. Aqu\xed tienes un ejemplo:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"var contador = 0;\n\nwhile (contador < 5) {\n  console.log(contador);\n  contador++;\n}\n")),(0,o.kt)("p",null,"En este caso, la condici\xf3n contador < 5 se eval\xfaa antes de cada iteraci\xf3n. Si es verdadera, se ejecuta el bloque de c\xf3digo. El bucle seguir\xe1 ejecut\xe1ndose mientras la condici\xf3n sea verdadera. Si la condici\xf3n es falsa desde el principio, el bloque de c\xf3digo no se ejecutar\xe1."),(0,o.kt)("ol",{start:2},(0,o.kt)("li",{parentName:"ol"},"Bucle do-while: En el bucle do-while, primero se ejecuta el bloque de c\xf3digo y luego se eval\xfaa la condici\xf3n. Esto garantiza que el bloque de c\xf3digo se ejecute al menos una vez, incluso si la condici\xf3n es falsa desde el principio. Aqu\xed tienes un ejemplo:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"var contador = 0;\n\ndo {\n  console.log(contador);\n  contador++;\n} while (contador < 5);\n")),(0,o.kt)("p",null,"En este caso, el bloque de c\xf3digo se ejecuta una vez sin importar la condici\xf3n. Despu\xe9s de cada ejecuci\xf3n, se eval\xfaa la condici\xf3n contador < 5. Si es verdadera, el bucle continuar\xe1 ejecut\xe1ndose. Si es falsa, el bucle se detendr\xe1."),(0,o.kt)("p",null,"En resumen, la diferencia clave es que el bucle while eval\xfaa la condici\xf3n antes de ejecutar el bloque de c\xf3digo, mientras que el bucle do-while ejecuta el bloque de c\xf3digo al menos una vez y luego eval\xfaa la condici\xf3n."),(0,o.kt)("p",null,"La elecci\xf3n entre un bucle while y un bucle do-while depende de las necesidades espec\xedficas del programa. Si se requiere que el bloque de c\xf3digo se ejecute al menos una vez, incluso si la condici\xf3n es falsa desde el principio, se utiliza un bucle do-while. Por otro lado, si se desea que el bloque de c\xf3digo se ejecute solo si la condici\xf3n es verdadera desde el principio, se utiliza un bucle while."),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"bucle-for"},"Bucle for"),(0,o.kt)("p",null,"El bucle for se utiliza para repetir un bloque de c\xf3digo un n\xfamero determinado de veces. Su sintaxis es la siguiente:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"for (inicializaci\xf3n; condici\xf3n; expresi\xf3n final) {\n    // Bloque de c\xf3digo a repetir\n}\n")),(0,o.kt)("p",null,"La inicializaci\xf3n es una expresi\xf3n que se ejecuta antes de que se ejecute el bucle. La condici\xf3n es una expresi\xf3n que se eval\xfaa antes de cada repetici\xf3n del bucle. Si la condici\xf3n se eval\xfaa como verdadera (true), se ejecuta el bloque de c\xf3digo dentro del bucle. Despu\xe9s, se ejecuta la expresi\xf3n final, y se eval\xfaa de nuevo la condici\xf3n. Si la condici\xf3n se eval\xfaa como verdadera (true), se ejecuta de nuevo el bloque de c\xf3digo dentro del bucle. Y as\xed sucesivamente hasta que la condici\xf3n se eval\xfae como falsa (false), en cuyo caso se termina la ejecuci\xf3n del bucle."),(0,o.kt)("p",null,"Aqu\xed tienes un ejemplo:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"for (var i = 0; i < 10; i++) {\n  console.log(i);\n}\n")),(0,o.kt)("p",null,"En este ejemplo, la inicializaci\xf3n es la expresi\xf3n var i = 0, que se ejecuta antes de que se ejecute el bucle. La condici\xf3n es la expresi\xf3n i < 10, que se eval\xfaa antes de cada repetici\xf3n del bucle. Si la condici\xf3n se eval\xfaa como verdadera (true), se ejecuta el bloque de c\xf3digo dentro del bucle. Despu\xe9s, se ejecuta la expresi\xf3n final, que es i++, y se eval\xfaa de nuevo la condici\xf3n. Si la condici\xf3n se eval\xfaa como verdadera (true), se ejecuta de nuevo el bloque de c\xf3digo dentro del bucle. Y as\xed sucesivamente hasta que la condici\xf3n se eval\xfae como falsa (false), en cuyo caso se termina la ejecuci\xf3n del bucle."),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"bucle-forin"},"Bucle for...in"),(0,o.kt)("p",null,"El bucle for...in se utiliza para recorrer las propiedades de un objeto. Su sintaxis es la siguiente:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"\nfor (variable in objeto) {\n    // Bloque de c\xf3digo a ejecutar\n}\n")),(0,o.kt)("p",null,"La variable es una variable que se utilizar\xe1 para almacenar el nombre de cada una de las propiedades del objeto. El bloque de c\xf3digo se ejecutar\xe1 una vez por cada propiedad del objeto."),(0,o.kt)("p",null,"Aqu\xed tienes un ejemplo:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"var persona = {\n  nombre: 'Juan',\n  apellido: 'P\xe9rez',\n  edad: 25\n};\n\nfor (var propiedad in persona) {\n  console.log(propiedad + ': ' + persona[propiedad]);\n}\n")),(0,o.kt)("p",null,"En este ejemplo, la variable propiedad se utilizar\xe1 para almacenar el nombre de cada una de las propiedades del objeto persona. El bloque de c\xf3digo se ejecutar\xe1 una vez por cada propiedad del objeto persona. En la primera iteraci\xf3n, la variable propiedad tendr\xe1 el valor 'nombre', por lo que se ejecutar\xe1 el c\xf3digo dentro del bloque de llaves, que mostrar\xe1 en la consola el valor de la propiedad nombre del objeto persona. En la segunda iteraci\xf3n, la variable propiedad tendr\xe1 el valor 'apellido', por lo que se ejecutar\xe1 el c\xf3digo dentro del bloque de llaves, que mostrar\xe1 en la consola el valor de la propiedad apellido del objeto persona. En la tercera iteraci\xf3n, la variable propiedad tendr\xe1 el valor 'edad', por lo que se ejecutar\xe1 el c\xf3digo dentro del bloque de llaves, que mostrar\xe1 en la consola el valor de la propiedad edad del objeto persona."),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"bucle-forof"},"Bucle for...of"),(0,o.kt)("p",null,"El bucle for...of se utiliza para recorrer los elementos de un objeto iterable. Su sintaxis es la siguiente:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"for (variable of iterable) {\n    // Bloque de c\xf3digo a ejecutar\n}\n")),(0,o.kt)("p",null,"La variable es una variable que se utilizar\xe1 para almacenar el valor de cada uno de los elementos del objeto iterable. El bloque de c\xf3digo se ejecutar\xe1 una vez por cada elemento del objeto iterable."),(0,o.kt)("p",null,"Aqu\xed tienes un ejemplo:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"var array = [1, 2, 3, 4, 5];\n\nfor (var elemento of array) {\n  console.log(elemento);\n}\n")),(0,o.kt)("p",null,"En este ejemplo, la variable elemento se utilizar\xe1 para almacenar el valor de cada uno de los elementos del objeto iterable array. El bloque de c\xf3digo se ejecutar\xe1 una vez por cada elemento del objeto iterable array. En la primera iteraci\xf3n, la variable elemento tendr\xe1 el valor 1, por lo que se ejecutar\xe1 el c\xf3digo dentro del bloque de llaves, que mostrar\xe1 en la consola el valor 1. En la segunda iteraci\xf3n, la variable elemento tendr\xe1 el valor 2, por lo que se ejecutar\xe1 el c\xf3digo dentro del bloque de llaves, que mostrar\xe1 en la consola el valor 2. En la tercera iteraci\xf3n, la variable elemento tendr\xe1 el valor 3, por lo que se ejecutar\xe1 el c\xf3digo dentro del bloque de llaves, que mostrar\xe1 en la consola el valor 3. Y as\xed sucesivamente hasta que se hayan recorrido todos los elementos del objeto iterable array."))}s.isMDXComponent=!0}}]);